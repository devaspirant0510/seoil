##용어
인증:로그인
인가:URI사용권한

##구조이해하기
Q. 다이나믹 웹 프로젝트 서버 실행 순서
Q. 리스너, 필터 서블릿의 실행 순서
Q. spring legacy 서버 실행순서
Q. spring legacy 시큐리티 실행순서
Q. 오라클데이터베이스에서 암호화하는 방법
Q. spring에서 패스워드 암호화는 방법

##정리
#spring web에서 xml설정파일이 로드되는 순서정리
1)web.xml에서 전역 context가 리스너 통해 설정파일을 로드 
 <listener>
  <listener-class>
  org.springframework.web.context.ContextLoaderListener
  </listener-class>
  </listener>
 <context-param>
 <param-name>contextConfigLocation</param-name>
 <param-value>/WEB-INF/root-context.xml</param-value>
  </context-param>
2)web.xml에서 필터 등록(여러개등록가능)
3)web.xml DispatcherServlet을 통해 설정파일 로드( 여러개 일 때init param으로 로드)
#개별로 적용할 경우
<servlet>
  <servlet-name>dispatcher</servlet-name>
  <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  <init-param>
  <param-name>contextConfigLocation</param-name>
  <param-value>
  /WEB-INF/config/member-servlet.xml
  </param-value>
  </init-param>
  </servlet>
#여러개 일 때init param으로 로드
  <param-value>
  /WEB-INF/config/member-servlet.xml
  /WEB-INF/config/board-servlet.xml
  /WEB-INF/config/login-servlet.xml
  </param-value>
4)DispatcherServlet bean이 생성되며 자동으로 설정파일(member-servlet.xml)이 로드
#해당파일은 <bean>을 이용하여 객체생성, @어노테이션 빈(객체생성)을 로드하는 역할
<context:component-scan base-package="board"/>
#페이지 view를 설정하는 역할처리
<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
<property name="prefix" value="/WEB-INF/views/member/"></property>
<property name="suffix" value=".jsp"></property>
</bean>

##spring에서 암호화 방법
//라이브러리 : spring-context, spring-security 추가
// BCryptPasswordEncoder 객체 생성
PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
        
// 원본 패스워드
String rawPassword = "1234";
        
// 패스워드를 암호화
String encodedPassword = passwordEncoder.encode(rawPassword);
System.out.println("Encoded password: " + encodedPassword);
        
// 패스워드 일치 여부 확인
boolean isMatch = passwordEncoder.matches("1111", encodedPassword);
System.out.println("Password matches: " + isMatch);

##############spring security 코드이해하기###############
1)maven project(web)생성
2)pom.xml에 기본설정하기(update, java jre설정)
3)pom.xml에 security라이브러리 추가(web, config, core, taglibs, test)
4)web.xml
리스너등록(xml bean설정)
필터등록(utf설정 필터, security 필터)
서브릿등록(DispatcherServlet 설정)

<!-- 리스너 등록 -->
  <listener>
  	<listener-class>
  	org.springframework.web.context.ContextLoaderListener
  	</listener-class>
  </listener>
  
  <context-param>
  	<param-name>contextConfigLocation</param-name>
  	<param-value>
  	/WEB-INF/config/root-context.xml
  	/WEB-INF/config/security-context.xml
  	</param-value>
  </context-param>
  
<!-- 필터 등록 -->
<filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
        <param-name>forceEncoding</param-name>
        <param-value>true</param-value>
    </init-param>
</filter>

<filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping> 

<!-- 서블릿등록 -->
 
<servlet>
  <servlet-name>app-dispatcher</servlet-name>
  <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  <init-param>
   <param-name>contextConfigLocation</param-name>
   <param-value>/WEB-INF/config/app-servlet.xml</param-value>
  </init-param>
  <load-on-startup>1</load-on-startup>
</servlet>
  
  <servlet-mapping>
  <servlet-name>app-dispatcher</servlet-name>
  <url-pattern>/*</url-pattern>
  </servlet-mapping>

5)리스너에서 등록한  security-context.xml파일 설정
namespace에서 security를 체크한 후 아래 내용입력
<!-- Spring Security 설정 -->
<security:http>
<!--권한에 따라 uri접근 가능여부 확인 -->
        <security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
        <security:intercept-url pattern="/user/**" access="hasRole('ROLE_USER')" />
        <security:form-login login-page="/login" default-target-url="/home" />
       <security:intercept-url pattern="/all/**" access="hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')" />

<!-- 로그인처리 -->
<!-- get방식 /login -->
        <!-- security처리:post방식의 /login -->
        <!-- login-page는 form상자의 처음로그인이 실패할 때 get /login호출 -->
        <!-- default-target-url : 로그인 성공시 이동페이지 -->
        <security:form-login 
        login-page="/login"  
        default-target-url="/user/index" 
        authentication-failure-url="/login?error=true"
        username-parameter="username"
        password-parameter="password"
        />

<!--로그아웃>    
<!-- get 방식의 logout 컨트롤러에 선언  -->
<!-- logout-url : post방식의 url을 주소의미 -->
<security:logout logout-url="/logout" logout-success-url="/login?logout=ture" />
    </security:http>

<!--계정을 설정 -->
    <!--
    단순하게 몇명의 사용자만 로그인이 필요한 경우 직접입력하여 로그인관리 
    인증 정보 소스 (여기서는 메모리 기반 사용) 
    로그인을 하면 인증권한을 부여하는데 이 속성은 authorities, 
    http에서 access 권한을 가지게 됨
    -->
    <security:authentication-manager>
        <security:authentication-provider>
            <security:user-service>
                <security:user name="admin" password="{noop}1234" authorities="ROLE_ADMIN" />
                <security:user name="user" password="{noop}1234" authorities="ROLE_USER" />
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>

6)서블릿을 등록하여 처리
app-servlet.xml파일을 열고
namespaces에서 context, mvc 체크, beans 체크해제 후 체크
<beans> -> <beans:beans>변경
view Resolver등록, 어노테이션 스캔 처리

7)security-context.xml의 url을 확인하고 각각의 컨트롤러 생성
AdminController, UserController, LoginController 3개 생성

8)로그인페이지에 포함할 사항
Responding with 403 status code
Invalid CSRF token found
<input type="hidden" name="${_csrf.parameterName}"  value="${_csrf.token}">

9)role권한에 관한 사항 확인
access="hasRole('ROLE_ADMIN')" : 권한이 접근 가능
access="hasRole('ROLE_USER') and hasRole('ROLE_ADMIN')"
access="isAuthenticated()" :인증이 되었으면 접근가능
access="denyAll" : 모두 거절
access="permitAll" : 모두 수락

10)로그아웃처리
security 설정파일에 http코드는 로그인, 로그아웃 post방식이므로 post방식으로 호출해야하며
csrf코드를 hidden상태에서 전송해야 문제가 해결됨.
추가적으로 csrf코드를 설정하는 코드가 존재함
질의)spring legacy security xml파일 설정에서 csrf해제하는 설정
<security:csrf disabled="true"/>
하지만 위의 코드는 테스트외에 사용하지 말것

11)사용자 정보에 대한 사항
pom.xml security-taglibs 라이브러 추가

jsp파일에서 사용자 정보보기 방법
<%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
<sec:authentication property="name"/>
<p>Authenticated User: ${principal.username} =>principal 직접사용불가 화면표시안됨 </p>
사용자 정보를 태그라이브러리 변수에 입력 후 사용가능
<sec:authentication property="principal" var="user"/>
<p>Authenticated User: ${user.username}</p>
<p>Authenticated User: <sec:authentication property="name"/> </p>

12)페이지를 찾지 못했을 경우 에러처리
web.xml 에 아래 코드 추가하고 컨트롤러에 location url처리
<error-page>
<error-code>404</error-code>
<location>/all/404</location>
</error-page>

13)접근거절 403에러 발생시
security-context.xml파일에 
<security:http>
<security:access-denied-handler error-page="/all/403"/>
</security:http>
