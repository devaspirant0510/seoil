##용어
인증:로그인
인가:URI사용권한

##구조이해하기
Q. 다이나믹 웹 프로젝트 서버 실행 순서
Q. 리스너, 필터 서블릿의 실행 순서
Q. spring legacy 서버 실행순서
Q. spring legacy 시큐리티 실행순서
Q. 오라클데이터베이스에서 암호화하는 방법
Q. spring에서 패스워드 암호화는 방법

##정리
#spring web에서 xml설정파일이 로드되는 순서정리
1)web.xml에서 전역 context가 리스너 통해 설정파일을 로드 
 <listener>
  <listener-class>
  org.springframework.web.context.ContextLoaderListener
  </listener-class>
  </listener>
 <context-param>
 <param-name>contextConfigLocation</param-name>
 <param-value>/WEB-INF/root-context.xml</param-value>
  </context-param>
2)web.xml에서 필터 등록(여러개등록가능)
3)web.xml DispatcherServlet을 통해 설정파일 로드( 여러개 일 때init param으로 로드)
#개별로 적용할 경우
<servlet>
  <servlet-name>dispatcher</servlet-name>
  <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  <init-param>
  <param-name>contextConfigLocation</param-name>
  <param-value>
  /WEB-INF/config/member-servlet.xml
  </param-value>
  </init-param>
  </servlet>
#여러개 일 때init param으로 로드
  <param-value>
  /WEB-INF/config/member-servlet.xml
  /WEB-INF/config/board-servlet.xml
  /WEB-INF/config/login-servlet.xml
  </param-value>
4)DispatcherServlet bean이 생성되며 자동으로 설정파일(member-servlet.xml)이 로드
#해당파일은 <bean>을 이용하여 객체생성, @어노테이션 빈(객체생성)을 로드하는 역할
<context:component-scan base-package="board"/>
#페이지 view를 설정하는 역할처리
<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
<property name="prefix" value="/WEB-INF/views/member/"></property>
<property name="suffix" value=".jsp"></property>
</bean>

##spring에서 암호화 방법
//라이브러리 : spring-context, spring-security 추가
// BCryptPasswordEncoder 객체 생성
PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
        
// 원본 패스워드
String rawPassword = "1234";
        
// 패스워드를 암호화
String encodedPassword = passwordEncoder.encode(rawPassword);
System.out.println("Encoded password: " + encodedPassword);
        
// 패스워드 일치 여부 확인
boolean isMatch = passwordEncoder.matches("1111", encodedPassword);
System.out.println("Password matches: " + isMatch);

##spring security 코드이해하기
1)maven project(web)생성
2)pom.xml에 기본설정하기(update, java jre설정)
3)pom.xml에 security라이브러리 추가
(web, config, core, taglibs, test)
<!-- spring security  -->
<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-web</artifactId>
    <version>5.6.3</version>
</dependency>
<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-config</artifactId>
    <version>5.6.3</version>
</dependency>
<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-core</artifactId>
    <version>5.6.3</version>
</dependency>
<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-taglibs</artifactId>
    <version>5.6.3</version>
</dependency>
<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-test</artifactId>
    <version>5.6.3</version>
</dependency>

3)web.xml
리스너등록(xml bean설정)
필터등록(utf설정 필터, security 필터)
서브릿등록(DispatcherServlet 설정)

<!-- 리스너 등록 -->
  <listener>
  	<listener-class>
  	org.springframework.web.context.ContextLoaderListener
  	</listener-class>
  </listener>
  
  <context-param>
  	<param-name>contextConfigLocation</param-name>
  	<param-value>
  	/WEB-INF/config/root-context.xml
  	/WEB-INF/config/security-context.xml
  	</param-value>
  </context-param>
  
<!-- 필터 등록 -->
<filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
        <param-name>forceEncoding</param-name>
        <param-value>true</param-value>
    </init-param>
</filter>

<filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping> 

<!-- 서블릿등록 -->
<!-- 
<servlet>
  <servlet-name>app-dispatcher</servlet-name>
  <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  <init-param>
   <param-name>contextConfigLocation</param-name>
   <param-value>/WEB-INF/config/app-servlet.xml</param-value>
  </init-param>
  <load-on-startup>1</load-on-startup>
</servlet>
  
  <servlet-mapping>
  <servlet-name>app-dispatcher</servlet-name>
  <url-pattern>/*</url-pattern>
  </servlet-mapping>
  -->







 
