#jsp:html+java

#jsp 실행하는 서버:apache(웹서버)+tomcat(애플리케이션)

#jsp : 서블릿(웹지원)

#리스너, 필터(서블릿 동작 되기전 실행되는 자바파일)
리스너(전역), 서블릿(지역)

#서브릿,리스너, 필터 모두 자바파일을 기초해서 만들어진 파일
내부구조 : 자바가 가진 기본구조(생성자, 소멸자)
서브릿,리스너, 필터(초기화(init)함수,파괴자(desotry)함수,이벤트함수(이벤트등록-on)) 

#웹소켓(C언어 소켓 연결방법)
소켓연결(open), 데이터를 주고받는 상태(message), 소켓닫기(close), 에러발생시(error)

#jsp상에서 웹소켓통신
1)jspwebsocket 프로젝트 생성
2)pom.xml 기본라이브러리 설정(update, build path)
<groupId>org.apache.tomcat</groupId>
<artifactId>tomcat-jsp-api</artifactId>
<version>9.0.71</version>
</dependency>
3)webapp/index.jsp파일생성
4)웹서버 설정(실행)
5)서버소켓객체 생성(@ServerEndpoint)
#소켓의 url지정 : @ServerEndpoint("/websocket")
#라이브러리 필요
<dependency>
    <groupId>javax.websocket</groupId>
    <artifactId>javax.websocket-api</artifactId>
    <version>1.1</version>
</dependency>
#객체함수에 구현할 함수(4개)
open, message, error, close함수 작성
각 함수의 이름은 마음대로 설정가능
이벤트 함수로 만들기 위해 어노테이션이 지원하는 @OnOpen,@OnMessage,@OnError,@OnClose를 함수에 등록
#오류사항
오류1: 메소드 [message]에, payload 파라미터가 존재하지 않습니다.
message함수에는 message가 들어와야 하므로 문자열 파라메다 필요
public void message(String message)
오류2:메소드 [error]에 Throwable 파라미터가 없습니다.
public void error(Throwable throwable)

6)index.jsp파일에서 script로 연결하기
<script>
const websocket=new WebSocket("ws://172.16.15.97:8888/websocket");
console.log(websocket);
</script>
실습:페이지를 연결한 후 서버의 console창 확인
페이지를 닫은 후 서버의 console창 확인

7)메시지를 전송
const websocket
=new WebSocket("ws://172.16.15.97:8888/websocket");
console.log(websocket);
websocket.send("hello websocket server!!");//****전송실패!!*** 
//왜?socket생성시 비동기화 처리(send함수가 실행 된 후에 소켓이 생성될 수 있다라는 의미(지연))
</script>

처리하는 방법은 버튼을 만들 후 send함수 실행
<button onclick="websocket.send('hello websocket server!!')">메시지전송</button>

8)웹소켓 객체에서 메시지 수신 확인
수신확인 후 서버가 클라이언트에게 메시지 전송
이때 필요한 사항(Session)

메시지 보내는 방법
session.getBasicRemote().sendText("hello client!!");

9)클라이언트에서 메시지 수신방법은 소켓의 내용이 get onmessage:f를 사용하여 다음과 같이 등록
<script>
//클라이언트에서 메시지 수신은 정해진 시점이 있는 것이 아니므로 이벤트를 등록하여 확인상태 유지
websocket.onmessage=function (message){
console.log(message); //json객체형식의 답변	
console.log(message.data); //필요로 하는 데이터만 추출
}
</script>

10)여러세션을 관리(함수안에서 리스트를 선언하면 한번 실행 후 정보가 삭제가 되므로 전역변수로 선언)
세션리스트를 무엇으로 관리할 것인가?array,list,(중복o),map,set(중복x)
map은 key, value로 이루어진 컬렉션 프레임워크
최종적으로 set은 이용(중복이 되지 않으므로)
static Set<Session> sessions=new HashSet<Session>();

11)접속시 session관리
@OnOpen
public void open(Session session) {
sessions.add(session);
System.out.println("현재접속자수:"+sessions.size()); 
//접속은 종료도 고려, 종료시 session제거(close함수처리)
}

12)종료시 세션관리
@OnClose
public void close(Session session) {
sessions.remove(session);
System.out.println("현재접속자수:"+sessions.size());
}

13)여러명의 접속자에게 메시지 전송
for(Session s:sessions) {
if(s.isOpen()) session.getBasicRemote().sendText(message);
}
추가사항:자신에게는 메시지를 전송하지 않도록 처리해 볼것

14)웹페이지에서 input상자에 메시지를 입력하고 
입력된 메시지를 보낸 후 모든 대상자에게 화면에 출력하는 코드를 작성



#spring상에서 웹소켓통신


