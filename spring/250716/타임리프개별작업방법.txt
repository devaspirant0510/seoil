#타임리프를 이용하여 
1)레이아웃을 적용
레이아웃 적용시 js, css파일 로드방법(부스트랩사용)
2)각자 구현할 내용을 폴더로 구분하여 개발할 시
설정파일 확인 : xxxx-servlet.xml
폴더설정 :
3)git으로 fetch or pull로 update 후 한명씩 main or master branch로 업로드하기

#프로젝트 생성
1)thymeleafPrj생성
2)pom.xml 환경설정/라이브러리설정(update, build path설정)
3)WEB-INF/web.xml
각 구현할 기능에 따라서 각각의 서블릿을 구성
확인사항:url에 따라 기능분리
예)/member/register
WEB-INF/config/member-servlet.xml
WEB-INF/views/member폴더생성
main/java/member폴더 생성(MemberController,MemberService,MemberDAO)
4)WEB-INF/config/xxxx-servlet.xml
<context:component-scan base-package="xxxx"/>
<mvc:resources mapping="/xxxx/**" location="/static/xxxx/" />
<mvc:annotation-driven/>
<bean id="thymeleafViewResolver" ....>

****구현된 코드****
<mvc:resources mapping="/**" location="/static/" /><!--webapp/static/  -->
<!-- 해당코드가 없을 경우 controller에서 mapping이 되지 않는 문제발생  -->
<mvc:annotation-driven/><!-- ***** resources사용할 때 반드시 같이사용-->

5)레이아웃설정
6)폴더별로 개발을 시작 및 종료
7)git에 upload

------------------------------------------
사용자 설정한 css, js를 적용
부스트랩을 적용
위의 코드는 공통적인 코드이므로 layout.html에 포함여부 결정
<link href="/css/style.css" rel="stylesheet">
<script src="/js/main.js"></script>

webapp/static/css폴더와 js폴더를 생성하고 파일생성

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js" integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy" crossorigin="anonymous"></script>



