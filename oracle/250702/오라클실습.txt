예제)학생(Student), 과목(Course), 수강신청(Enrollment) 테이블의 관계
학생은 과목을 수강신청한다.
-- 학생 테이블 생성
drop table student;
CREATE TABLE Student (
    id INT PRIMARY KEY,        -- 학생 ID
    name VARCHAR2(100) NOT NULL -- 학생 이름
);

-- 과목 테이블 생성
drop table course;
CREATE TABLE Course (
    id INT PRIMARY KEY,         -- 과목 ID
    name VARCHAR2(100) NOT NULL -- 과목 이름
);

-- 수강신청 테이블 생성
drop table Enrollment;
CREATE TABLE Enrollment (
    student_id INT,                    -- 학생 ID
    course_id INT,                     -- 과목 ID
    coursedate DATE,              -- 수강 신청 날짜
    PRIMARY KEY (student_id, course_id), -- 학생과 과목의 조합이 유니크하도록 설정
    FOREIGN KEY (student_id) REFERENCES Student(id) on delete cascade,
    FOREIGN KEY (course_id) REFERENCES Course(id) on delete cascade
);

-- 학생 데이터 입력
INSERT INTO Student (id, name) VALUES (1, '김철수');
INSERT INTO Student (id, name) VALUES (2, '이영희');
INSERT INTO Student (id, name) VALUES (3, '박민수');
INSERT INTO Student (id, name) VALUES (4, '최지혜');
INSERT INTO Student (id, name) VALUES (5, '홍길동');
INSERT INTO Student (id, name) VALUES (6, '강나래');
INSERT INTO Student (id, name) VALUES (7, '조성호');
INSERT INTO Student (id, name) VALUES (8, '이준호');
INSERT INTO Student (id, name) VALUES (9, '배은지');
INSERT INTO Student (id, name) VALUES (10, '송현우');

-- 과목 데이터 입력
INSERT INTO Course (id, name) VALUES (1, '알고리즘');
INSERT INTO Course (id, name) VALUES (2, '데이터베이스');
INSERT INTO Course (id, name) VALUES (3, '소프트웨어 공학');
INSERT INTO Course (id, name) VALUES (4, '운영체제');
INSERT INTO Course (id, name) VALUES (5, '네트워크');

-- 수강 신청 데이터 입력
INSERT INTO Enrollment (student_id, course_id, coursedate) VALUES (1, 1, TO_DATE('2025-07-01', 'YYYY-MM-DD'));
INSERT INTO Enrollment (student_id, course_id, coursedate) VALUES (2, 2, TO_DATE('2025-07-01', 'YYYY-MM-DD'));
INSERT INTO Enrollment (student_id, course_id, coursedate) VALUES (3, 3, TO_DATE('2025-07-02', 'YYYY-MM-DD'));
INSERT INTO Enrollment (student_id, course_id, coursedate) VALUES (4, 4, TO_DATE('2025-07-02', 'YYYY-MM-DD'));
INSERT INTO Enrollment (student_id, course_id, coursedate) VALUES (5, 5, TO_DATE('2025-07-03', 'YYYY-MM-DD'));
INSERT INTO Enrollment (student_id, course_id, coursedate) VALUES (6, 1, TO_DATE('2025-07-03', 'YYYY-MM-DD'));
INSERT INTO Enrollment (student_id, course_id, coursedate) VALUES (7, 2, TO_DATE('2025-07-04', 'YYYY-MM-DD'));
INSERT INTO Enrollment (student_id, course_id, coursedate) VALUES (8, 3, TO_DATE('2025-07-04', 'YYYY-MM-DD'));
INSERT INTO Enrollment (student_id, course_id, coursedate) VALUES (9, 4, TO_DATE('2025-07-05', 'YYYY-MM-DD'));
INSERT INTO Enrollment (student_id, course_id, coursedate) VALUES (10, 5, TO_DATE('2025-07-05', 'YYYY-MM-DD'));

##테이블 삭제
테이블 생성 :  학생 -> 코스 -> 수강
삭제순서 : 생성순서대로 동일하게 삭제(drop table student;drop table course;drop table Enrollment;)
테이블 삭제시 : 역순으로 삭제
#Q)역순으로 삭제하지 않고 삭제하는 방법을 찾으시오.
1) drop table student cascade constraints; --연쇄적인(cascade)명령을 이용하여 처리
2)테이블 설정 시 cascade를 적용하는 방법
alter table enrollment
add foreign key(student_id) references student(id) on delete cascade;

## 참고사항 : 제약사항 삭제명령 : alter table enrollment drop constaint fk_course;
alter table enrollment
add foreign key(course_id) references course(id) on delete cascade;

select * from student;
select * from course;
select * from enrollment;

##변수설정하기
SQL> SET SERVEROUTPUT ON; --dbms_output_put_line함수가 실행되도록 설정
SQL> DECLARE
    str_test VARCHAR2(50); -- 변수 선언
    begin
    str_test:='oracle db'; -- :=는 값을 입력하는 명령
    dbms_output.put_line(str_test);
    end;
/
--sqlplus에서 실행시 반드시 /를 포함해야함

##제어문
--학생테이블에 12부터 100번까지 데이터를 반복문으로 처리하시오.
DECLARE
i number(2):=12; --변수 초기화
begin
    loop
    insert into student values(i,'홍길동' || i);
    i:=i+1;
    exit when i>30;
    end loop;
end;

select * from student;

--while
DECLARE 
i number(2):=1;
begin 
    while(i<11)
    loop
    dbms_output.put_line(i);
    i:=i+1;
    end loop;
end;

--for (for문은 declare없이 for구문에서 변수가 선언가능)
--DECLARE 
--i number(2):=1;
begin 
    for i in 1..10
    loop
    dbms_output.put_line(i);
    end loop;
end;

##뷰권한생성을 가지는 명령(system에서 권한 처리)
GRANT CREATE VIEW TO 사용자_이름;

##view, index, procedure(리턴없음/단순처리), function(리턴있음), trigger
#view
create view 뷰명 as select구문
#index
create index 인덱스명 on 테이블명(필드)

#function
--function
create function testfunc
return number
is
--변수정의
a number;
begin
a:=20;
return a;
end;

--testfunc()
select testfunc() from dual;

--위의 funtion을 다시 정의하고 실행하면 오류 발생
create or replace function testfunc
return number
is
--변수정의
a number;
begin
a:=20;
return a;
end;

--function을 만들고 emp테이블의 근로자의 총 수를 확인하는 함수 작성
select count(*) from emp;

create or replace function empcount
return number
is
cnt number:=0;
begin
--cnt:=select count(*) from emp; --오류발생
select count(*) into cnt from emp;
return cnt;
end;

--확인방법1
select empcount() from dual;

--확인방법2
begin
DBMS_OUTPUT.PUT_LINE(empcount());
end;


create or replace function empcount
return number
is
cnt number:=0;
begin
select count(*) into cnt from emp;
DBMS_OUTPUT.PUT_LINE(cnt);
return cnt;
end;

--입력값을 전달하는 함수
create or replace function empcount(i in number)
return number
is
cnt number:=0;
begin
select count(*) into cnt from emp;
cnt:=cnt+i;
return cnt;
end;

select empcount(1) from dual;

예제)
create table sungjuk(
  id number,
  kor number,
  eng number,
 math number);
insert into sungjuk values(1,100,80,70);
insert into sungjuk values(2,90,80,90);
insert into sungjuk values(3,80,80,80);
select sum(kor) from sungjuk;

문제)아래의 명령이 실행되도록 score라는 함수를 만들어
필드명을 입력하면 해당 필드의 합계가 출력되는 함수 생성을 하시오.
select score('kor') from dual;
select score('eng') from dual;
select score('math') from dual;

#프로시저 생성
create or replace procedure pro01
is
begin
--select * from emp; --select 처리시 오류발생
insert into test values(1,'홍길동1');
insert into test values(2,'홍길동2');
insert into test values(3,'홍길동3');
end;
--프로시저 실행방법
execute  pro01;
select * from test;

--예제)test테이블에 아이디, 이름을 파라메다로 입력받고 처리하는 
--test_insert 프로시저를 작성하시오.
create or replace procedure test_insert(id number, name varchar2)
is
begin
insert into test values(id, name);
end;

execute test_insert(4,'김길동');
exec test_insert(4,'김길동');
select * from test;

--자바에서 프로시저 사용하기
Class.forName("oracle.jdbc.driver.OracleDriver");
		String url="jdbc:oracle:thin:@localhost:1521:xe";
		String user="test";
		String password="1111";
		Connection conn=DriverManager.getConnection(url, user, password);
		//프로시저 방법 test_insert(id, name)
		PreparedStatement ps
		//=conn.prepareStatement("{call test_insert(?, ?)}");
		=conn.prepareCall("{call test_insert(?, ?)}");
		ps.setInt(1, 7);
		ps.setString(2,"염길동");
		System.out.println(ps.execute());
		ps.close(); conn.close();

#트리거
create table test(
id number,
name varchar2(20)
);

create table test2(
id number,
name varchar2(20)
);
--시나리오:test2에 값을 입력하면 test에 값이 입력되게 처리
create or replace trigger tri01
after insert on test2
begin
insert into test values(1,'홍길동1');
insert into test values(2,'홍길동2');
insert into test values(3,'홍길동3');
end;

select * from test;
select * from test2;

insert into test2 values(1,'홍길동');
-- test2테이블이 삭제 될 때 test의 모든 테이블이 삭제되도록 처리
create or replace trigger tri01
after delete on test2
begin
delete from test;
end;

#패키지 생성
패키지안에 넣을 수 있는 명령은 프로시저, 함수, 파라미터, 리턴정의
create or replace package 패키지명
as
	procedure testinsert;
	funtion 함수명 return 리턴형;
end 패키지명;

프로시저와 함수를 정의하여 사용하는 방법
create or replace package 패키지명
as
	procedure 프로시저명1
	is 
	begin
	end 프로시저명1

	procedure 프로시저명2
	is 
	begin
	end 프로시저명2

	funtion 함수명 return 리턴형
	is
	begin

	return 리턴값
	end 함수명;
end 패키지명;

##alter정리(구조변경)
#구조추가(add): 
나이필드를 추가하세요? 
alter table test1 add age int;

#구조 변경(modify):
num필드를 varchar2(10) 속성으로 변경하세요? 
alter table test1 modify num varchar2(10);

#구조 삭제(drop):
age필드를 삭제하세요?
alter table test1 drop age;(x)
alter table test1 drop column age;(o)

#제약조건추가(add): 필드가 없을 때
주의할 사항:현재필드의 속성을 정확히 알고 있어야함
alter table test1 add age int not null; (현재 필드가 존재하지 않는 상태)

#제약조건 변경(modify)한다는 의미는 필드가 있을 때
alter table test1 modify age int not null;(수정가능)
alter table test1 modify age not null;(수정가능)-제약조건 추가하면 기존속성 유지

#제약조건삭제(modify):
age의 제약조건인 not null을 없애는 방법
alter table test1 modify age int null;

#테이블명 변경(rename to):
test1을 test2로변경
alter table test1 rename to test2;

#컬럼이름 변경(rename column):
num필드명을 id로 변경
alter table test2 rename column num to id;

#테이블복사
insert into test2 values(1,'hong1',20);
insert into test2 values(2,'hong2',30);
create table test1 as select * from test2;
