###관계테이블
##학생은 여러번 성적을 가진다.라는 명제에 대한 
일 대 다, 다 대일 관계의 오라클 테이블과 자바 객체 생성

#1:N (일 대 다) 관계테이블정보
-- 학생 테이블 (Student)
CREATE TABLE student (
    student_id NUMBER PRIMARY KEY,
    name VARCHAR2(100),
    major VARCHAR2(100)
);

-- 성적 테이블 (Grade)
CREATE TABLE grade (
    grade_id NUMBER PRIMARY KEY,
    student_id NUMBER,  -- 외래 키
    subject VARCHAR2(100),
    score NUMBER(3),
    FOREIGN KEY (student_id) REFERENCES student(student_id)
);

#데이터 입력
-- 학생 데이터 입력
INSERT INTO student (student_id, name, major) VALUES (1, '홍길동', '컴퓨터공학');
INSERT INTO student (student_id, name, major) VALUES (2, '김영희', '전자공학');

-- 성적 데이터 입력
INSERT INTO grade (grade_id, student_id, subject, score) VALUES (101, 1, '자료구조', 95);
INSERT INTO grade (grade_id, student_id, subject, score) VALUES (102, 1, '운영체제', 88);
INSERT INTO grade (grade_id, student_id, subject, score) VALUES (103, 2, '회로이론', 91);
INSERT INTO grade (grade_id, student_id, subject, score) VALUES (104, 2, '디지털논리', 85);

## 객체 모델링
# Student.java
import java.util.List;

public class Student {
    private int studentId;
    private String name;
    private String major;
    private List<Grade> grades;  // 1:N 관계
}
# Grade.java
public class Grade {
    private int gradeId;
    private int studentId;  // 외래 키
    private String subject;
    private int score;
}

db처리
# StudentMapper.xml
<mapper namespace="com.example.mapper.StudentMapper">

    <!-- 학생 전체 조회 -->
    <select id="getAllStudents" resultType="Student">
        SELECT student_id, name, major FROM student
    </select>

    <!-- 학생 ID로 성적 조회 -->
    <select id="getGradesByStudentId" resultType="Grade" parameterType="int">
        SELECT grade_id, student_id, subject, score
        FROM grade
        WHERE student_id = #{studentId}
    </select>

</mapper>

#StudentMapper.java
public interface StudentMapper {
    List<Student> getAllStudents();
    List<Grade> getGradesByStudentId(int studentId);
}

#StudentService.java
@Service
public class StudentService {

    @Autowired
    private StudentMapper studentMapper;

    public List<Student> getStudentsWithGrades() {
        List<Student> students = studentMapper.getAllStudents();
        for (Student student : students) {
            List<Grade> grades = studentMapper.getGradesByStudentId(student.getStudentId());
            student.setGrades(grades);
        }
        return students;
    }
}

#StudentController.java
@Controller
public class StudentController {

    @Autowired
    private StudentService studentService;

    @GetMapping("/students")
    public String getStudents(Model model) {
        List<Student> students = studentService.getStudentsWithGrades();
        model.addAttribute("students", students);
        return "studentList"; // studentList.jsp 또는 studentList.html
    }
}

student.jsp
<!DOCTYPE html>
<head>
    <title>학생 목록과 성적</title>
</head>
<body>
    <h1>학생 성적 조회</h1>
    <div>
        <h2></h2>
        <ul>
          <li ></li>
        </ul>
        <hr/>
    </div>
</body>
</html>

###고객(Customer) - 물품(Product) - 구매(Purchase)"는 N:M 관계
-- 고객 테이블
CREATE TABLE customer (
    customer_id NUMBER PRIMARY KEY,
    name VARCHAR2(100),
    email VARCHAR2(100)
);

-- 물품 테이블
CREATE TABLE product (
    product_id NUMBER PRIMARY KEY,
    name VARCHAR2(100),
    price NUMBER(10, 2)
);

-- 구매 테이블 (N:M 관계 연결 테이블)
CREATE TABLE purchase (
    purchase_id NUMBER PRIMARY KEY,
    customer_id NUMBER,
    product_id NUMBER,
    quantity NUMBER,
    purchase_date DATE,
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
    FOREIGN KEY (product_id) REFERENCES product(product_id)
);

-- 고객
INSERT INTO customer VALUES (1, '홍길동', 'hong@example.com');
INSERT INTO customer VALUES (2, '김영희', 'kim@example.com');

-- 물품
INSERT INTO product VALUES (100, '노트북', 1500000);
INSERT INTO product VALUES (101, '마우스', 25000);
INSERT INTO product VALUES (102, '키보드', 45000);

-- 구매
INSERT INTO purchase VALUES (1001, 1, 100, 1, SYSDATE);
INSERT INTO purchase VALUES (1002, 1, 101, 2, SYSDATE);
INSERT INTO purchase VALUES (1003, 2, 102, 1, SYSDATE);

#model
public class Customer {
    private int customerId;
    private String name;
    private String email;
    private List<Purchase> purchases; // 연결관계
}

public class Product {
    private int productId;
    private String name;
    private double price;
}

public class Purchase {
    private int purchaseId;
    private int customerId;
    private int productId;
    private int quantity;
    private Date purchaseDate;

    private Product product; // 구매한 제품 정보 포함
}

#CustomerMapper.xml
<mapper namespace="com.example.mapper.CustomerMapper">

    <!-- 고객 전체 조회 -->
    <select id="getAllCustomers" resultType="Customer">
        SELECT customer_id, name, email FROM customer
    </select>

    <!-- 고객의 구매 목록 조회 -->
    <select id="getPurchasesByCustomerId" resultMap="purchaseWithProduct" parameterType="int">
        SELECT 
            p.purchase_id, p.customer_id, p.product_id, p.quantity, p.purchase_date,
            pr.name AS product_name, pr.price AS product_price
        FROM purchase p
        JOIN product pr ON p.product_id = pr.product_id
        WHERE p.customer_id = #{customerId}
    </select>

    <resultMap id="purchaseWithProduct" type="Purchase">
        <id property="purchaseId" column="purchase_id"/>
        <result property="customerId" column="customer_id"/>
        <result property="productId" column="product_id"/>
        <result property="quantity" column="quantity"/>
        <result property="purchaseDate" column="purchase_date"/>
        <association property="product" javaType="Product">
            <result property="name" column="product_name"/>
            <result property="price" column="product_price"/>
        </association>
    </resultMap>

</mapper>

public interface CustomerMapper {
    List<Customer> getAllCustomers();
    List<Purchase> getPurchasesByCustomerId(int customerId);
}

